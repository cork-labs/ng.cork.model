@ngdoc overview
@name ng.cork.model.factory
@description

> Provides a model factory generator.

# Dependencies

- None.


# Usage

Add the module as a dependency.

<pre>
angular.module('app', ['ng.cork.model.factory']);
</pre>

**NOTE:** this is a partial module. Use `ng.cork.model` instead to include the entire library.


## Service: [corkModelFactory](#/api/ng.cork.model.factory.corkModelFactory)

> Generate model factories by providing a definition.

Generate factories on the fly.

<pre>
angular.module('app', ['ng.cork.model.factory'])
.controller('myController', [
    'corkModelFactory',
    function (corkModelFactory) {
        var userFactory = corkModelFactory({
            $constructor: CorkModel,
            name: 'post',
            service 'myServicePosts',
            methods: {
                'load': null,
                'save': null,
                'delete': null
            }
        });
        // create instances using the factory
        var user = userFactory($scope.data);
        // will invoke myServicePosts.delete(user)
        user.delete().then( ... );
    }
]);
</pre>

Aggregate your model factories in an instance of {@link ng.cork.model.space.CorkModelSpace CorkModelSpace} to be able to
create model instances from any part of your app.

<pre>
angular.module('app', ['ng.cork.model.factory'])
.service('myApiModels', [
    'CorkModelSpace',
    function (CorkModelSpace) {
        return new CorkModelSpace();
    }
])
.run([
    'corkModelFactory',
    'myApiModels',
    function (corkModelFactory, myApiModels) {
        myApiModels.model('user', corkModelFactory({ ... }));
        myApiModels.model('post', corkModelFactory({ ... }));
        myApiModels.model('tag', corkModelFactory({ ... }));
    }
])
.controller('myController', [
    'myApiModels',
    function (myApiModels) {
        $scope.user = myApiModels.model('user').$new({ ... some data ... });
        $scope.post = myApiModels.model('user').$new();
    }
]);
</pre>
